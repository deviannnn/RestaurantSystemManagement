version: '3.8'

services:
  catalog_mysql:
    image: mysql:9
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - MYSQL_DATABASE=restaurant_system_catalog
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3307:3306"
    volumes:
      - catalog-db-data:/var/lib/mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h127.0.0.1 -uroot -p123456" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  order_mysql:
    image: mysql:9
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - MYSQL_DATABASE=restaurant_system_order
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3308:3306"
    volumes:
      - order-db-data:/var/lib/mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h127.0.0.1 -uroot -p123456" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  payment_mysql:
    image: mysql:9
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - MYSQL_DATABASE=restaurant_system_payment
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3309:3306"
    volumes:
      - payment-db-data:/var/lib/mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h127.0.0.1 -uroot -p123456" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  table_mysql:
    image: mysql:9
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - MYSQL_DATABASE=restaurant_system_table
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3310:3306"
    volumes:
      - table-db-data:/var/lib/mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h127.0.0.1 -uroot -p123456" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  user_mysql:
    image: mysql:9
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - MYSQL_DATABASE=restaurant_system_user
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3311:3306"
    volumes:
      - user-db-data:/var/lib/mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h127.0.0.1 -uroot -p123456" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  rabbitmq_service:
    image: rabbitmq:3.13-management-alpine
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  redis_service:
    image: redis:7.2.5-alpine
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      restart_policy:
        condition: any
        delay: 0s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  catalog_service:
    image: deviannnn/restaurant:catalog
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_REDIS_HOST=redis_service
      - PROD_DB_USERNAME=root
      - PROD_DB_PASSWORD=123456
      - PROD_DB_NAME=restaurant_system_catalog
      - PROD_DB_HOSTNAME=catalog_mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  kitchen_service:
    image: deviannnn/restaurant:kitchen
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
    networks:
      - restaurant_net

  mail_service:
    image: deviannnn/restaurant:mail
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  order_service:
    image: deviannnn/restaurant:order
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
      - PROD_DB_USERNAME=root
      - PROD_DB_PASSWORD=123456
      - PROD_DB_NAME=restaurant_system_order
      - PROD_DB_HOSTNAME=order_mysql
      - CATALOG_SERVICE_HOSTNAME=catalog_service
      - TABLE_SERVICE_HOSTNAME=table_service
      - CATALOG_SERVICE_PORT=5000
      - TABLE_SERVICE_PORT=5000
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  payment_service:
    image: deviannnn/restaurant:payment
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
      - PROD_DB_USERNAME=root
      - PROD_DB_PASSWORD=123456
      - PROD_DB_NAME=restaurant_system_payment
      - PROD_DB_HOSTNAME=payment_mysql
      - ORDER_SERVICE_HOSTNAME=order_service
      - ORDER_SERVICE_PORT=5000
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  table_service:
    image: deviannnn/restaurant:table
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
      - PROD_DB_USERNAME=root
      - PROD_DB_PASSWORD=123456
      - PROD_DB_NAME=restaurant_system_table
      - PROD_DB_HOSTNAME=table_mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  user_service:
    image: deviannnn/restaurant:user
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
      - PROD_REDIS_HOST=redis_service
      - PROD_DB_USERNAME=root
      - PROD_DB_PASSWORD=123456
      - PROD_DB_NAME=restaurant_system_user
      - PROD_DB_HOSTNAME=user_mysql
    networks:
      - restaurant_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

  waiter_service:
    image: deviannnn/restaurant:waiter
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin
      - PROD_RABBITMQ_HOSTNAME=rabbitmq_service
    networks:
      - restaurant_net

  api_gateway:
    image: deviannnn/restaurant:api-gateway
    deploy:
      placement:
        constraints:
          - node.role == worker
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 0s
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0.2
        order: stop-first
    environment:
      - NODE_ENV=production
      - PROD_REDIS_HOST=redis_service
      - CATALOG_SERVICE_HOSTNAME=catalog_service
      - MAIL_SERVICE_HOSTNAME=mail_service
      - ORDER_SERVICE_HOSTNAME=order_service
      - PAYMENT_SERVICE_HOSTNAME=payment_service
      - TABLE_SERVICE_HOSTNAME=table_service
      - USER_SERVICE_HOSTNAME=user_service
      - KITCHEN_SERVICE_HOSTNAME=kitchen_service
      - WAITER_SERVICE_HOSTNAME=waiter_service
      - CATALOG_SERVICE_PORT=5000
      - MAIL_SERVICE_PORT=5000
      - ORDER_SERVICE_PORT=5000
      - PAYMENT_SERVICE_PORT=5000
      - TABLE_SERVICE_PORT=5000
      - USER_SERVICE_PORT=5000
      - KITCHEN_SERVICE_PORT=5000
      - WAITER_SERVICE_PORT=5000
    ports:
      - "80:5000"
    networks:
      - restaurant_net

  viz:
    image: dockersamples/visualizer
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - restaurant_net

  prometheus:
    image: prom/prometheus
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - restaurant_net

  grafana:
    image: grafana/grafana
    deploy:
      placement:
        constraints:
          - node.role == manager
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - restaurant_net

volumes:
  catalog-db-data:
  order-db-data:
  payment-db-data:
  table-db-data:
  user-db-data:
  rabbitmq-data:
  redis-data:
  grafana-storage:


networks:
  restaurant_net:
    driver: overlay
